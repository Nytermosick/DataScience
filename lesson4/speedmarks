import numpy as np

w0 = np.zeros((49))
w1 = np.zeros((49))
w2 = np.zeros((49))
w3 = np.zeros((49))

D = np.array([
    [0,0,0,0,0,0,0, 1,1,1,0,0,1,0, 0,0,1,0,1,0,1, 1,1,1,0,1,0,1, 1,0,0,0,1,0,1, 1,1,1,0,0,1,0, 0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0, 1,1,1,0,0,1,0, 0,0,1,0,1,0,1, 1,1,1,0,1,0,1, 0,0,1,0,1,0,1, 1,1,1,0,0,1,0, 0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0, 1,0,1,0,0,1,0, 1,0,1,0,1,0,1, 1,1,1,0,1,0,1, 0,0,1,0,1,0,1, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0, 1,1,1,0,0,1,0, 1,0,0,0,1,0,1, 1,1,1,0,1,0,1, 1,0,1,0,1,0,1, 1,1,1,0,0,1,0, 0,0,0,0,0,0,0],
])

Y0 = np.array([1, 0, 0, 0])
Y1 = np.array([0, 1, 0, 0])
Y2 = np.array([0, 0, 1, 0])
Y3 = np.array([0, 0, 0, 1])

a = 0.2
b = -0.4
t = lambda x: 1 if x > 0 else 0


def f0(x):
    s = b + np.sum(x @ w0)
    return t(s)

def f1(x):
    s = b + np.sum(x @ w1)
    return t(s)

def f2(x):
    s = b + np.sum(x @ w2)
    return t(s)

def f3(x):
    s = b + np.sum(x @ w3)
    return t(s)


def train0():
    global w0
    _w = w0.copy()
    for x, y in zip(D, Y0):
        w0 += a * (y - f0(x)) * x
    return (w0 != _w).any()

def train1():
    global w1
    _w = w1.copy()
    for x, y in zip(D, Y1):
        w1 += a * (y - f1(x)) * x
    return (w1 != _w).any()

def train2():
    global w2
    _w = w2.copy()
    for x, y in zip(D, Y2):
        w2 += a * (y - f2(x)) * x
    return (w2 != _w).any()

def train3():
    global w3
    _w = w3.copy()
    for x, y in zip(D, Y3):
        w3 += a * (y - f3(x)) * x
    return (w3 != _w).any()

while train0() and train1() and train2() and train3():
    print(w0, w1, w2, w3)

for x in D:
    print(x, f0(x), f1(x), f2(x), f3(x))
