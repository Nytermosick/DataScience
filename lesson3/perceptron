import numpy as np

w0 = np.zeros((25))

D0 = np.array([
    [0, 0, 1, 0, 0,  0, 1, 0, 1, 0,  0, 1, 0, 1, 0,  0, 1, 0, 1, 0,  0, 0, 1, 0, 0],
    [0, 1, 1, 1, 0,  0, 1, 0, 1, 0,  0, 1, 0, 1, 0,  0, 1, 0, 1, 0,  0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0,  0, 1, 1, 1, 0,  0, 1, 0, 1, 0,  0, 1, 1, 1, 0,  0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0,  1, 0, 0, 0, 1,  1, 0, 0, 0, 1,  1, 0, 0, 0, 1,  0, 1, 1, 1, 0],
    [1, 1, 1, 1, 1,  1, 0, 0, 0, 1,  1, 0, 0, 0, 1,  1, 0, 0, 0, 1,  1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0,  0, 0, 1, 0, 0,  0, 1, 0, 1, 0,  0, 0, 1, 0, 0,  0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0],
])

Y0 = np.array([1, 1, 1, 1, 1, 1, 0, 0, 0, 0])


w1 = np.zeros((25))

D1 = np.array([
    [0, 0, 1, 0, 0,  0, 1, 0, 1, 0,  0, 1, 0, 1, 0,  0, 1, 0, 1, 0,  0, 0, 1, 0, 0],
    [0, 1, 1, 1, 0,  0, 1, 0, 1, 0,  0, 1, 0, 1, 0,  0, 1, 0, 1, 0,  0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0,  0, 1, 1, 1, 0,  0, 1, 0, 1, 0,  0, 1, 1, 1, 0,  0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0,  1, 0, 0, 0, 1,  1, 0, 0, 0, 1,  1, 0, 0, 0, 1,  0, 1, 1, 1, 0],
    [1, 1, 1, 1, 1,  1, 0, 0, 0, 1,  1, 0, 0, 0, 1,  1, 0, 0, 0, 1,  1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0,  0, 0, 1, 0, 0,  0, 1, 0, 1, 0,  0, 0, 1, 0, 0,  0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0,  0, 0, 1, 0, 0],
])

Y1 = np.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1])

a = 0.2
b = -0.4
t = lambda x: 1 if x > 0 else 0


def f0(x):
    s = b + np.sum(x @ w0)
    return t(s)

def f1(x):
    s = b + np.sum(x @ w1)
    return t(s)


def train0():
    global w0
    _w = w0.copy()
    for x, y in zip(D0, Y0):
        w0 += a * (y - f0(x)) * x
    return (w0 != _w).any()

def train1():
    global w1
    _w = w1.copy()
    for x, y in zip(D1, Y1):
        w1 += a * (y - f1(x)) * x
    return (w1 != _w).any()


while train0() and train1():
    print(w0, w1)

for x in D0:
    print(x, f0(x), f1(x))
